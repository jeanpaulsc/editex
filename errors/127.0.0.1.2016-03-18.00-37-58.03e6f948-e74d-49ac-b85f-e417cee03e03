(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'index'"
p3
sS'layer'
p4
S'/Users/admin/web2py/applications/editex/controllers/compose.py'
p5
sS'code'
p6
S'import datetime\n\ndef index():\n    rows = db(db.sect.id>0).select(orderby=\'sid\')\n    return dict(rows=rows)\n\ndef problem_index():             # expects section as session.sect\n    session.section = db(db.sect.id==request.args(0,int)).select().first() or redirect(\'index\')\n    rows = db(db.segment.section_id==request.args(0,int)).select(orderby=\'problem\')\n    if len(rows)==0:\n        print \'section error\'\n        redirect(\'compose\',\'index\')\n    print "form prepared",datetime.datetime.today()\n    return dict(rows=rows)\n\ndef append_compound():\n    session.pid = request.args(0,int)\n    form = SQLFORM(db.segments,fields=[\'body\',\'image\'])\n    if form.process().accepted:\n        db.segment.update(session.pid,comp_id=form.vars.id)\n    return dict()\n\ndef define_problem():\n    form = SQLFORM.factory(\n        Field(\'section\', \'integer\', requires=IS_NOT_EMPTY()),\n        Field(\'problem\', \'integer\', requires=IS_NOT_EMPTY()),\n        Field(\'subpart\'))\n    form.vars.section=session.sid\n    form.vars.problem=session.pnum\n    if form.process().accepted:\n        response.flash = \'defaults updated\'\n        session.sid = int(form.vars.section)\n        session.pnum = int(form.vars.problem)\n        session.pid = db(db.segment.problem==int(session.pnum)).select().first()\n        if not session.prid:\n            session.pid = db.segment.insert(status=\'problem\')\n            redirect(URL(\'compose\',\'define_proot\',args=session.pid))\n        session.subparts = db(db.segment.parent_id==int(session.pnum)).select()\n        redirect(\'compose\',\'define_subs\')\n    elif form.errors:\n        response.flash = \'form has errors\'\n    return dict(form=form)\n\ndef define_proot():\n    return dict()\n\ndef define_subs():\n    return dict()\n\ndef compounder():\n    if request.args:\n        print \'in compounder with new curseg: \', request.args(0)\n        session.curseg = request.args(0)\n    form = SQLFORM(db.segment,fields=[\'body\',\'image\'])\n    rows = db(db.part.comp_id==comp_id).select()\n    print len(rows), \' existing found\'\n    if form.process().accepted:\n        print \'record created: \',form.args.id\n        return LOAD(\'compose\',\'compounder\',ajax=True,ajax_trap=True)\n    return dict(form=form,rows=rows)\n\ndef compound_problem():\n    form = SQLFORM(db.segment)\n    return dict(form=form)\n\ndef compound():\n    rows = db(db.compound.problem==request.args(0,int)).select() or redirect(\'index\')\n    return dict(rows=rows)\n\ndef subsegedit():\n    if len(request.args)==0:\n        session.pid=request.args(0,int)\n    print \'in controller: subsegedit\'\n    form = SQLFORM(db.segment,fields=[\'body\',\'image\'])\n    rows = db(db.segment.parent_id==session.pid).select(orderby=\'problem\')\n    if form.process().accepted:\n        return LOAD(\'compose\',\'compounder\',ajax=True,ajax_trap=True)\n    return dict(form=form,rows=rows)\n\ndef compounder():\n    print \'in compounder\'\n    rows = db(db.segment.comp_id==session.pid).select()\n    form = SQLFORM(db.segment,fields=[\'body\',\'image\'])\n    if form.process().accepted:\n        return LOAD(\'compose\',\'compounder\',ajax=True,ajax_trap=True)\n    return dict(form=form,rows=rows)\n\n\ndef new_compound():\n    rid = request.args(0)\n    print \'id: \', id\n    form = SQLFORM(db.compound)\n    if form.accepted:\n        db.compound.update(rid,next=form.vars.id)\n        response.flash=\'accepted\'\n        if form.vars.image:\n            return IMG(src=form.vars.image)\n        else:\n            return form.vars.body\n    return dict(form=form)\n    """\n     session.cur_section\n\n    for row in rows:\n        rstring=A(row.body,href=URL(\'show_problem\',args=row.id))\n        session.m.append(rstring)\n    return dict(table=TABLE(*[TR(v) for v in session.m]))\n"""\n\ndef sub_segments():\n    rows = db(db.segment.parent_id==request.args(0,int)).select()\n    return dict(rows=rows)\n\ndef data():\n    rid=0\n    if not session.m:\n        session.m = []\n    if request.vars.q:\n        try:\n            rid = db.segment.insert(body=request.vars.q)\n            rstring=A(request.vars.q,href=URL(\'show_problem\',args=rid))\n            session.m.append(rstring)\n        except Exception, e:\n            response.flash=\'db error: %s\' % e\n    return TABLE(*[TR(v) for v in session.m])\n\n\ndef data2():\n    rid=0\n    if not session.m:\n        session.m = []\n    if request.vars.image:\n        session.m.append(IMG(src=URL(\'download\',args=request.vars.image)))\n    else:\n        session.m.append(form.vars.body)\n    return TABLE(*[TR(v) for v in session.m])\n\ndef compounder3():\n    form = SQLFORM(db.compound)\n    if form.accepted:\n        response.flash=\'form accepted\'\n        return LOAD(\'compose\',\'compounder\',ajax=True,ajax_trap=True)\n    else:\n        response.flash=\'form error \', Exception\n    return dict(form=form,rows=rows)\n\ndef flash():\n    response.flash = \'this text should appear!\'\n    return dict()\n\ndef fade():\n    return dict()\n\n\ndef new_section():\n    form=SQLFORM(db.sect)\n    if form.process().accepted:\n        redirect(URL(\'compose\',\'section_index\',args=form.vars.id))\n    return dict(form=form)\n\ndef append_problem():\n    return "jQuery(\'#problems\').append(%s);" % repr(request.vars.body)\n\n""" WRITE """\n@auth.requires_login()\ndef add_problem():\n    print \'entered add_problem\'\n    body=request.vars.body\n    print "body: ",body\n    bid = db.segment.insert(body=body)\n    print "problem inserted"\n    return "jquery(\'#problems\').append(%s);" % body\n\n@auth.requires_login()\ndef new_problem():\n    body=request.vars.body\n    form = SQLFORM(db.segment)  #,fields=[\'body\'],formstyle=\'divs\',labels={\'body\':""})\n    if form.process().accepted:\n        db(db.segment.id==form.vars.id).update(segnum=form.vars.id)\n        response.flash=form.vars.segment_body\n    return dict(form=form)\n\n@auth.requires_login()\ndef append_txt():\n    segnum = request.args(0)\n    form = SQLFORM(db.segment,fields=[\'body\'],formstyle=\'divs\',labels={\'body\':""})\n    if form.process().accepted:\n        id = form.vars.id\n        db(db.segment.id==form.vars.id).update(segnum=segnum,parent_id=None,category=\'txt\')\n        response.flash=\'record added\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef append_tex():\n    segnum = request.args(0)\n    form = SQLFORM(db.segment,fields=[\'body\'],formstyle=\'divs\',labels={\'body\':""})\n    if form.process().accepted:\n        id = form.vars.id\n        db(db.segment.id==form.vars.id).update(segnum=segnum,parent_id=None,category=\'tex\')\n        response.flash=\'record added\'\n    return dict(form=form)\n\n""" READ """\n@auth.requires_login()\ndef show_problem():\n    session.cur_owner = ""\n    rows = db(db.segment.segnum==request.args(0)).select()\n    return dict(rows=rows)\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\n""" WORKING  """\n\ndef form():\n    return dict()\nresponse._vars=response._caller(problem_index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/admin/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/admin/web2py/applications/editex/controllers/compose.py", line 218, in <module>\n  File "/Users/admin/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/admin/web2py/applications/editex/controllers/compose.py", line 8, in problem_index\n    session.section = db(db.sect.id==request.args(0,int)).select().first() or redirect(\'index\')\n  File "/Library/Python/2.7/site-packages/pydal/objects.py", line 1986, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Library/Python/2.7/site-packages/pydal/adapters/sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Library/Python/2.7/site-packages/pydal/adapters/base.py", line 1245, in select\n    sql = self._select(query, fields, attributes)\n  File "/Library/Python/2.7/site-packages/pydal/adapters/base.py", line 1132, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Library/Python/2.7/site-packages/pydal/adapters/base.py", line 916, in expand\n    rv = op(first, second, **optional_args)\n  File "/Library/Python/2.7/site-packages/pydal/adapters/base.py", line 810, in EQ\n    self.expand(second, first.type))\n  File "/Library/Python/2.7/site-packages/pydal/adapters/base.py", line 926, in expand\n    rv = self.represent(expression, field_type)\n  File "/Library/Python/2.7/site-packages/pydal/adapters/base.py", line 1394, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'index\'\n'
p11
s.