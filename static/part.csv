part.id,part.problem,part.body,part.category,part.part_id,part.image,part.parent_num,part.parent_id,part.section_id,part.auth_btn,part.auth_id
1,1,"Suppose you are given an array A[ 1...n ] of sorted integers that has been circularly shifted k positions to the right. For example, [ 35, 42, 5, 15, 27, 29 ] is a sorted array that has been circularly shifted k = 2 positions, while [ 27, 29, 35, 42, 5, 15 ] has been shifted k = 4 positions. Give an algorithm for finding the maximum element in A that runs in O( log n ) time.",txt,<NULL>,,<NULL>,<NULL>,1,-1,1
2,2,"You’ve been hired by a financial company that periodically examines how a particular security has done in the last n days, and then tries to determine the maximum possible profit that could have been made by someone buying and selling that security during those n days.
More formally, let A be an array of n numbers. We wish to find",txt,<NULL>,,<NULL>,<NULL>,1,<NULL>,1
3,2,,img,<NULL>,part.image.bb2070d826153f97.68772d312e322e706e67.png,<NULL>,<NULL>,1,<NULL>,1
4,2,"The idea is that on day j we could buy at A[ j ] dollars and at a later date, k > j, we could sell it for A[ k ] dollars, making a profit of A[ k ] − A[ j ]. (Note that in only considering k > j we are, implicitly, ignoring the possibility of making money by “short-selling”.)",txt,<NULL>,,<NULL>,<NULL>,1,,1
5,a,Give a simple O(n2) algorithm for determining (1) (not a divide-and-conquer algorithm).,txt,<NULL>,,<NULL>,2,1,-1,1
6,b,"Give a more efficient, recursive, divide-and-conquer algorithm for the same problem.",txt,<NULL>,,<NULL>,2,1,-1,1
7,c,Write the recurrence relation for the running time of your algorithm and use the Master Theorem to give an upper bound for the running time of your algorithm.,txt,<NULL>,,<NULL>,2,1,-1,1
8,3,"Consider the following sorting algorithm: First sort the first two thirds of the elements in the array. Next sort the last two thirds of the array. Finally, sort the first two thirds again. Note that after each two-thirds sort, the relevant elements are stored in the same two thirds of the array were they resided before the sort; no extra storage is allocated.",txt,<NULL>,,<NULL>,<NULL>,1,<NULL>,1
9,a,Give an informal but convincing explanation (not a rigorous proof by induction) of why this algorithm returns a fully sorted array.,txt,<NULL>,,3,8,1,-1,1
10,b,"Find a recurrence relation for the worst-case running time of this algorithm, then solve it using the Master Theorem.",txt,<NULL>,,3,8,1,-1,1
11,4,"In this problem we consider a monotonously decreasing function f : N → Z, that is, f takes as input any natural number and returns an integer number such that for any integer i, f(i)>f(i+1). We want to find",txt,<NULL>,,<NULL>,<NULL>,1,,1
12,4,,img,<NULL>,part.image.b9bf7396fb33eaa4.68772d312e342e706e67.png,<NULL>,<NULL>,1,<NULL>,1
13,4,"That is, we want to find the “‘first place where f is at or below the horizontal axis.”
Assume we can compute f(i) for any input i in constant time. Clearly, we can solve the problem in O(n) time by evaluating f(1),f(2),f(3),... until we see a non-positive number. Give an O(log n) algorithm.",txt,<NULL>,,<NULL>,<NULL>,1,-1,1
14,5,"The maximum partial sum problem (MPS) is defined as follows. Given an array A[1...n] of integers, find values i and j with 1 ≤ i ≤ j ≤ n maximizing",txt,<NULL>,,<NULL>,<NULL>,1,<NULL>,1
15,5,,img,<NULL>,part.image.ae43e18f4b511b8e.68772d312e352e312e706e67.png,<NULL>,<NULL>,1,<NULL>,1
16,5,"Example: If A = [4,−5, 6, 7, 8,−10, 5], the solution is i = 3 and j = 5 (as 6 + 7 + 8 = 21). To design an efficient algorithm for MPS, we consider the left l-position maximal partial sum
problem l-LMPS. This problem consists of finding a value j with l ≤ j ≤ n maximizing",txt,<NULL>,,<NULL>,<NULL>,1,,1
17,5,,img,<NULL>,part.image.b82c5abb2ffeb07e.68772d312e352e322e706e67.png,<NULL>,<NULL>,1,<NULL>,1
18,5,"Similarly, the right r-position maximal partial sum problem r-RMPS, consists of finding a
value i with 1 ≤ i ≤ r maximizing",txt,<NULL>,,<NULL>,<NULL>,1,<NULL>,1
19,5,,img,<NULL>,part.image.86f7288656a55258.68772d312e352e332e706e67.png,<NULL>,<NULL>,1,<NULL>,1
20,5,"Example: If A = [4, −5, 6, 7, 8, −10, 5], the solution 4-LMPS is j = 5 (as 7 + 8 = 15) and the
solution to 7-RMPS is i = 3 (as 6 + 7 + 8 − 10 + 5 = 16).",txt,<NULL>,,<NULL>,<NULL>,1,,1
21,a,Describe O(n) time algorithms for solving l-LMPS and r-RMPS (for given l and r).,txt,<NULL>,,5,20,1,-1,1
22,b,Given a O(n) time algorithm for l-LMPS describe a simple O(n2) algorithm for MPS.,txt,<NULL>,,5,20,1,-1,1
23,c,Given O(n) time algorithms for l-LMPS and r-RMPS describe an O(n log n) divide-and- conquer algorithm for MPS.,txt,<NULL>,,5,20,1,-1,1
